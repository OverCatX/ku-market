name: Auto Pull Request

on:
  push:
    branches:
      - "features/**"
      - "feature/**"
      - "feat/**"
  workflow_run:
    workflows: ["Develop CI"]
    types:
      - completed
    branches:
      - develop

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read

jobs:
  feature-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # ดึงประวัติทั้งหมดเพื่อเปรียบเทียบ branch

      - name: Get branch name
        id: branch
        run: echo "name=$(echo ${GITHUB_REF##*/})" >> $GITHUB_OUTPUT

      - name: Check if branch exists on remote
        id: validate
        run: |
          # ตรวจสอบว่า branch มีอยู่จริงบน remote
          if ! git ls-remote --heads origin "${{ steps.branch.outputs.name }}" | grep -q "${{ steps.branch.outputs.name }}"; then
            echo "❌ Branch not found on remote"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # ตรวจสอบว่ามี commits แตกต่างจาก develop หรือไม่
          git fetch origin develop
          DIFF_COUNT=$(git rev-list --count origin/develop..HEAD)

          if [ "$DIFF_COUNT" -eq "0" ]; then
            echo "⚠️ No commits difference from develop"
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "reason=no_commits" >> $GITHUB_OUTPUT
          else
            echo "✅ Found $DIFF_COUNT commits ahead of develop"
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "commit_count=$DIFF_COUNT" >> $GITHUB_OUTPUT
          fi

      - name: Skip if no changes
        if: steps.validate.outputs.valid == 'false'
        run: |
          echo "::notice::Skipping PR creation - no new commits compared to develop"
          exit 0

      - name: Create PR body
        if: steps.validate.outputs.valid == 'true'
        id: content
        run: |
          cat << EOF >> $GITHUB_OUTPUT
          body<<EOFBODY
          ## ✨ Feature Branch → Develop

          **Branch:** \`${{ steps.branch.outputs.name }}\`
          **Author:** @${{ github.actor }}
          **Commits:** ${{ steps.validate.outputs.commit_count }} commits ahead of develop

          ### 📝 Description
          Add ${{ steps.branch.outputs.name }}

          ### 🧪 Testing Status
          CI tests are running... Check status below.

          ### ✅ Checklist
          - [ ] Code follows team standards
          - [ ] Tests added/updated
          - [ ] Documentation updated
          - [ ] Ready for review

          ---
          🤖 Auto-created on push. CI status will update automatically.
          EOFBODY
          EOF

      - name: Check if PR exists
        if: steps.validate.outputs.valid == 'true'
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR=$(gh pr list \
            --head "${{ steps.branch.outputs.name }}" \
            --base "develop" \
            --state open \
            --json number \
            --jq '.[0].number' 2>/dev/null || echo "")

          if [ -n "$PR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "number=${PR}" >> $GITHUB_OUTPUT
            echo "PR exists: #${PR}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No existing PR found"
          fi

      - name: Create labels if not exist
        if: steps.validate.outputs.valid == 'true' && steps.check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh label create "auto-pr" --color "0366d6" --description "Auto-created PR" --force || true
          gh label create "feature" --color "a2eeef" --description "Feature branch" --force || true
          gh label create "needs-review" --color "fbca04" --description "Needs code review" --force || true

      - name: Create PR
        if: steps.validate.outputs.valid == 'true' && steps.check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr create \
            --base "develop" \
            --head "${{ steps.branch.outputs.name }}" \
            --title "🚀 ${{ steps.branch.outputs.name }} → develop" \
            --body "${{ steps.content.outputs.body }}" \
            --label "auto-pr,feature,needs-review" || \
          gh pr create \
            --base "develop" \
            --head "${{ steps.branch.outputs.name }}" \
            --title "🚀 ${{ steps.branch.outputs.name }} → develop" \
            --body "${{ steps.content.outputs.body }}"

      - name: Update PR
        if: steps.validate.outputs.valid == 'true' && steps.check.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          gh pr comment ${{ steps.check.outputs.number }} \
            --body "🔄 New commits pushed by @${{ github.actor }} at ${TIMESTAMP}"

  develop-pr:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'develop'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Check if develop differs from main
        id: validate
        run: |
          git fetch origin main
          DIFF_COUNT=$(git rev-list --count origin/main..origin/develop)

          if [ "$DIFF_COUNT" -eq "0" ]; then
            echo "⚠️ No difference between develop and main"
            echo "valid=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Found $DIFF_COUNT commits ahead of main"
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "commit_count=$DIFF_COUNT" >> $GITHUB_OUTPUT
          fi

      - name: Skip if no changes
        if: steps.validate.outputs.valid == 'false'
        run: |
          echo "::notice::Skipping PR creation - develop is up to date with main"
          exit 0

      - name: Create PR body
        if: steps.validate.outputs.valid == 'true'
        id: content
        run: |
          cat << 'EOF' >> $GITHUB_OUTPUT
          body<<EOFBODY
          ## 🎯 Develop → Main (Production Ready)

          ✅ All CI checks passed on develop branch

          ### 📊 Test Results
          - Frontend: ✅ Passed
          - Backend: ✅ Passed  
          - Integration: ✅ Passed
          - Docker Build: ✅ Passed

          ### 📋 Pre-Deployment Checklist
          - [ ] Code reviewed by team lead
          - [ ] All features tested
          - [ ] Documentation updated
          - [ ] Database migrations ready (if any)
          - [ ] Environment variables checked

          ### 🔗 Links
          - [CI Run](${{ github.event.workflow_run.html_url }})
          - [Commit](${{ github.event.workflow_run.head_sha }})

          ---
          🤖 Auto-created after successful CI on develop
          EOFBODY
          EOF

      - name: Check if PR exists
        if: steps.validate.outputs.valid == 'true'
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR=$(gh pr list \
            --head "develop" \
            --base "main" \
            --state open \
            --json number \
            --jq '.[0].number' 2>/dev/null || echo "")

          if [ -n "$PR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "number=${PR}" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create labels if not exist
        if: steps.validate.outputs.valid == 'true' && steps.check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh label create "auto-pr" --color "0366d6" --description "Auto-created PR" --force || true
          gh label create "release" --color "d73a4a" --description "Release to production" --force || true
          gh label create "ci-passed" --color "0e8a16" --description "CI checks passed" --force || true
          gh label create "needs-review" --color "fbca04" --description "Needs code review" --force || true

      - name: Create PR
        if: steps.validate.outputs.valid == 'true' && steps.check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr create \
            --base "main" \
            --head "develop" \
            --title "🚀 Release: develop → main" \
            --body "${{ steps.content.outputs.body }}" \
            --label "auto-pr,release,ci-passed,needs-review" || \
          gh pr create \
            --base "main" \
            --head "develop" \
            --title "🚀 Release: develop → main" \
            --body "${{ steps.content.outputs.body }}"

      - name: Update PR
        if: steps.validate.outputs.valid == 'true' && steps.check.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          COMMENT="## ✅ New Changes Ready for Production

          **Updated:** ${TIMESTAMP}
          **CI Status:** All tests passed ✅

          [View Latest CI Run](${{ github.event.workflow_run.html_url }})

          ---
          🤖 Auto-updated by GitHub Actions"

          gh pr comment ${{ steps.check.outputs.number }} --body "${COMMENT}"
          gh pr edit ${{ steps.check.outputs.number }} --add-label "ci-passed" || true

  ci-failed-notify:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.head_branch == 'develop'
    steps:
      - name: Notify
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## ❌ Develop CI Failed

          **Branch:** develop
          **Status:** Tests Failed

          ⚠️ PR to main will NOT be created until CI passes

          🔗 [View Failed Run](${{ github.event.workflow_run.html_url }})

          ### 🔧 Action Required
          1. Check CI logs
          2. Fix failing tests on develop
          3. Push fixes
          4. Wait for CI to pass
          EOF
