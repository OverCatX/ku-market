name: Auto Pull Request

on:
  push:
    branches:
      - "features/**"
      - "feature/**"
      - "feat/**"
  workflow_run:
    workflows: ["Develop CI"]
    types:
      - completed
    branches:
      - develop

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read

jobs:
  feature-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get branch name
        id: branch
        run: echo "name=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

      - name: Validate branch
        id: validate
        run: |
          BRANCH_NAME="${{ steps.branch.outputs.name }}"
          echo "🔍 Checking branch: $BRANCH_NAME"

          # ตรวจสอบว่า branch มีอยู่จริงบน remote
          if ! git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "::error::Branch $BRANCH_NAME not found on remote"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "✅ Branch exists on remote"

          # ตรวจสอบว่ามี commits แตกต่างจาก develop
          git fetch origin develop
          DIFF_COUNT=$(git rev-list --count origin/develop..origin/$BRANCH_NAME)

          echo "📊 Commits ahead of develop: $DIFF_COUNT"

          if [ "$DIFF_COUNT" -eq "0" ]; then
            echo "::warning::No commits difference between $BRANCH_NAME and develop - SKIPPING PR creation"
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "reason=no_commits" >> $GITHUB_OUTPUT
            
            # แสดงข้อความใน summary
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ## ⏭️ PR Creation Skipped

          **Branch:** \`$BRANCH_NAME\`
          **Reason:** No new commits compared to develop

          ### 💡 What to do:
          1. Make changes to your branch
          2. Commit and push: \`git commit -m "your changes" && git push\`
          3. Or merge latest develop: \`git merge origin/develop && git push\`
          EOF
            
            exit 0
          else
            echo "::notice::✅ Found $DIFF_COUNT commits ahead of develop - proceeding with PR"
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "commit_count=$DIFF_COUNT" >> $GITHUB_OUTPUT
          fi

      - name: Create PR body
        if: steps.validate.outputs.valid == 'true'
        id: content
        run: |
          BRANCH_NAME="${{ steps.branch.outputs.name }}"
          ACTOR="${{ github.actor }}"
          COMMIT_COUNT="${{ steps.validate.outputs.commit_count }}"

          # Escape backticks properly
          cat >> $GITHUB_OUTPUT << ENDOFBODY
          body<<EOFMARKER
          ## ✨ Feature Branch → Develop

          **Branch:** \\\`${BRANCH_NAME}\\\`
          **Author:** @${ACTOR}
          **Commits:** ${COMMIT_COUNT} commits ahead of develop

          ### 📝 Description
          New feature branch ready for review

          ### 🧪 Testing Status
          CI tests are running... Check status below.

          ### ✅ Checklist
          - [ ] Code follows team standards
          - [ ] Tests added/updated
          - [ ] Documentation updated
          - [ ] Ready for review

          ---
          🤖 Auto-created on push. CI status will update automatically.
          EOFMARKER
          ENDOFBODY

      - name: Check if PR exists
        if: steps.validate.outputs.valid == 'true'
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BRANCH_NAME="${{ steps.branch.outputs.name }}"

          PR=$(gh pr list \
            --head "$BRANCH_NAME" \
            --base "develop" \
            --state open \
            --json number \
            --jq '.[0].number' 2>/dev/null || echo "")

          if [ -n "$PR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "number=${PR}" >> $GITHUB_OUTPUT
            echo "::notice::PR already exists: #${PR}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "::notice::No existing PR found"
          fi

      - name: Create labels
        if: steps.validate.outputs.valid == 'true' && steps.check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        continue-on-error: true
        run: |
          gh label create "auto-pr" --color "0366d6" --description "Auto-created PR" --force
          gh label create "feature" --color "a2eeef" --description "Feature branch" --force
          gh label create "needs-review" --color "fbca04" --description "Needs code review" --force

      - name: Create PR
        if: steps.validate.outputs.valid == 'true' && steps.check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BRANCH_NAME="${{ steps.branch.outputs.name }}"
          PR_BODY="${{ steps.content.outputs.body }}"

          echo "Creating PR from $BRANCH_NAME to develop..."

          # Try with labels first, fallback without labels
          gh pr create \
            --base "develop" \
            --head "$BRANCH_NAME" \
            --title "🚀 $BRANCH_NAME → develop" \
            --body "$PR_BODY" \
            --label "auto-pr,feature,needs-review" 2>/dev/null || \
          gh pr create \
            --base "develop" \
            --head "$BRANCH_NAME" \
            --title "🚀 $BRANCH_NAME → develop" \
            --body "$PR_BODY"

      - name: Update PR
        if: steps.validate.outputs.valid == 'true' && steps.check.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          ACTOR="${{ github.actor }}"
          PR_NUMBER="${{ steps.check.outputs.number }}"

          gh pr comment "$PR_NUMBER" \
            --body "🔄 New commits pushed by @${ACTOR} at ${TIMESTAMP}"

  develop-pr:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'develop'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Validate develop branch
        id: validate
        run: |
          git fetch origin main
          DIFF_COUNT=$(git rev-list --count origin/main..origin/develop)

          if [ "$DIFF_COUNT" -eq "0" ]; then
            echo "::warning::No difference between develop and main"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "::notice::Found $DIFF_COUNT commits ahead of main"
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "commit_count=$DIFF_COUNT" >> $GITHUB_OUTPUT
          fi

      - name: Create PR body
        if: steps.validate.outputs.valid == 'true'
        id: content
        run: |
          CI_URL="${{ github.event.workflow_run.html_url }}"
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"

          cat << 'EOFBODY' >> $GITHUB_OUTPUT
          body<<ENDOFBODY
          ## 🎯 Develop → Main (Production Ready)

          ✅ All CI checks passed on develop branch

          ### 📊 Test Results
          - Frontend: ✅ Passed
          - Backend: ✅ Passed  
          - Integration: ✅ Passed
          - Docker Build: ✅ Passed

          ### 📋 Pre-Deployment Checklist
          - [ ] Code reviewed by team lead
          - [ ] All features tested
          - [ ] Documentation updated
          - [ ] Database migrations ready (if any)
          - [ ] Environment variables checked

          ### 🔗 Links
          EOFBODY

          echo "- [CI Run]($CI_URL)" >> $GITHUB_OUTPUT
          echo "- [Commit]($COMMIT_SHA)" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT

          cat << 'EOFBODY' >> $GITHUB_OUTPUT
          ---
          🤖 Auto-created after successful CI on develop
          ENDOFBODY
          EOFBODY

      - name: Check if PR exists
        if: steps.validate.outputs.valid == 'true'
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR=$(gh pr list \
            --head "develop" \
            --base "main" \
            --state open \
            --json number \
            --jq '.[0].number' 2>/dev/null || echo "")

          if [ -n "$PR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "number=${PR}" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create labels
        if: steps.validate.outputs.valid == 'true' && steps.check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        continue-on-error: true
        run: |
          gh label create "auto-pr" --color "0366d6" --description "Auto-created PR" --force
          gh label create "release" --color "d73a4a" --description "Release to production" --force
          gh label create "ci-passed" --color "0e8a16" --description "CI checks passed" --force
          gh label create "needs-review" --color "fbca04" --description "Needs code review" --force

      - name: Create PR
        if: steps.validate.outputs.valid == 'true' && steps.check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR_BODY="${{ steps.content.outputs.body }}"

          gh pr create \
            --base "main" \
            --head "develop" \
            --title "🚀 Release: develop → main" \
            --body "$PR_BODY" \
            --label "auto-pr,release,ci-passed,needs-review" 2>/dev/null || \
          gh pr create \
            --base "main" \
            --head "develop" \
            --title "🚀 Release: develop → main" \
            --body "$PR_BODY"

      - name: Update PR
        if: steps.validate.outputs.valid == 'true' && steps.check.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          CI_URL="${{ github.event.workflow_run.html_url }}"
          PR_NUMBER="${{ steps.check.outputs.number }}"

          COMMENT="## ✅ New Changes Ready for Production

          **Updated:** ${TIMESTAMP}
          **CI Status:** All tests passed ✅

          [View Latest CI Run](${CI_URL})

          ---
          🤖 Auto-updated by GitHub Actions"

          gh pr comment "$PR_NUMBER" --body "$COMMENT"
          gh pr edit "$PR_NUMBER" --add-label "ci-passed" 2>/dev/null || true

  ci-failed-notify:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.head_branch == 'develop'
    steps:
      - name: Notify
        run: |
          CI_URL="${{ github.event.workflow_run.html_url }}"

          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## ❌ Develop CI Failed

          **Branch:** develop
          **Status:** Tests Failed

          ⚠️ PR to main will NOT be created until CI passes

          🔗 [View Failed Run]($CI_URL)

          ### 🔧 Action Required
          1. Check CI logs
          2. Fix failing tests on develop
          3. Push fixes
          4. Wait for CI to pass
          EOF
