name: Auto Pull Request

on:
  push:
    branches:
      - "features/**"
      - "feature/**"
      - "feat/**"
  workflow_run:
    workflows: ["Develop CI"]
    types:
      - completed
    branches:
      - develop

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read

jobs:
  feature-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract branch name
        id: branch
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          echo "name=${BRANCH}" >> $GITHUB_OUTPUT
          echo "Branch: ${BRANCH}"

      - name: Create PR body
        id: content
        run: |
          BRANCH_NAME="${{ steps.branch.outputs.name }}"
          ACTOR="${{ github.actor }}"

          cat << EOF >> $GITHUB_OUTPUT
          body<<EOFBODY
          ## ‚ú® Feature Branch ‚Üí Develop

          **Branch:** ${BRANCH_NAME}
          **Author:** @${ACTOR}

          ### üìù Description
          Add ${BRANCH_NAME}.

          ### üß™ Testing Status
          CI tests are running... Check status below.

          ### ‚úÖ Checklist
          - [ ] Code follows team standards
          - [ ] Tests added/updated
          - [ ] Documentation updated
          - [ ] Ready for review

          ---
          ü§ñ Auto-created on push. CI status will update automatically.
          EOFBODY
          EOF

      - name: Check if PR exists
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR=$(gh pr list \
            --head "${{ steps.branch.outputs.name }}" \
            --base "develop" \
            --state open \
            --json number \
            --jq '.[0].number' 2>/dev/null || echo "")

          if [ -n "$PR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "number=${PR}" >> $GITHUB_OUTPUT
            echo "PR exists: #${PR}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No existing PR found"
          fi

      - name: Check if there are new commits
        id: commits
        if: steps.check.outputs.exists == 'false'
        run: |
          git fetch origin develop
          COMMITS=$(git rev-list --count origin/develop..HEAD)
          echo "count=${COMMITS}" >> $GITHUB_OUTPUT
          echo "Found ${COMMITS} new commits"
          
          if [ "$COMMITS" -eq "0" ]; then
            echo "‚ö†Ô∏è No new commits between ${{ steps.branch.outputs.name }} and develop"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Found ${COMMITS} commits to merge"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Create labels if not exist
        if: steps.check.outputs.exists == 'false' && steps.commits.outputs.skip == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create labels (ignore if already exist)
          gh label create "auto-pr" --color "0366d6" --description "Auto-created PR" --force || true
          gh label create "feature" --color "a2eeef" --description "Feature branch" --force || true
          gh label create "needs-review" --color "fbca04" --description "Needs code review" --force || true

      - name: Create PR
        if: steps.check.outputs.exists == 'false' && steps.commits.outputs.skip == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr create \
            --base "develop" \
            --head "${{ steps.branch.outputs.name }}" \
            --title "üöÄ ${{ steps.branch.outputs.name }} ‚Üí develop" \
            --body "${{ steps.content.outputs.body }}" \
            --label "auto-pr,feature,needs-review" || \
          gh pr create \
            --base "develop" \
            --head "${{ steps.branch.outputs.name }}" \
            --title "üöÄ ${{ steps.branch.outputs.name }} ‚Üí develop" \
            --body "${{ steps.content.outputs.body }}"

      - name: Skip PR creation
        if: steps.check.outputs.exists == 'false' && steps.commits.outputs.skip == 'true'
        run: |
          echo "‚ö†Ô∏è Skipping PR creation - no new commits between ${{ steps.branch.outputs.name }} and develop"
          echo "This branch is already up to date with develop"
          echo ""
          echo "üí° Tip: This usually means the branch was already merged or is identical to develop"

      - name: Update PR
        if: steps.check.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          gh pr comment ${{ steps.check.outputs.number }} \
            --body "üîÑ New commits pushed by @${{ github.actor }} at ${TIMESTAMP}"

  develop-pr:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'develop'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Create PR body
        id: content
        run: |
          cat << 'EOF' >> $GITHUB_OUTPUT
          body<<EOFBODY
          ## üéØ Develop ‚Üí Main (Production Ready)

          ‚úÖ All CI checks passed on develop branch

          ### üìä Test Results
          - Frontend: ‚úÖ Passed
          - Backend: ‚úÖ Passed  
          - Integration: ‚úÖ Passed
          - Docker Build: ‚úÖ Passed

          ### üìã Pre-Deployment Checklist
          - [ ] Code reviewed by team lead
          - [ ] All features tested
          - [ ] Documentation updated
          - [ ] Database migrations ready (if any)
          - [ ] Environment variables checked

          ### üîó Links
          - [CI Run](${{ github.event.workflow_run.html_url }})
          - [Commit](${{ github.event.workflow_run.head_sha }})

          ---
          ü§ñ Auto-created after successful CI on develop
          EOFBODY
          EOF

      - name: Check if PR exists
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PR=$(gh pr list \
            --head "develop" \
            --base "main" \
            --state open \
            --json number \
            --jq '.[0].number' 2>/dev/null || echo "")

          if [ -n "$PR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "number=${PR}" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create labels if not exist
        if: steps.check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh label create "auto-pr" --color "0366d6" --description "Auto-created PR" --force || true
          gh label create "release" --color "d73a4a" --description "Release to production" --force || true
          gh label create "ci-passed" --color "0e8a16" --description "CI checks passed" --force || true
          gh label create "needs-review" --color "fbca04" --description "Needs code review" --force || true

      - name: Create PR
        if: steps.check.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr create \
            --base "main" \
            --head "develop" \
            --title "üöÄ Release: develop ‚Üí main" \
            --body "${{ steps.content.outputs.body }}" \
            --label "auto-pr,release,ci-passed,needs-review" || \
          gh pr create \
            --base "main" \
            --head "develop" \
            --title "üöÄ Release: develop ‚Üí main" \
            --body "${{ steps.content.outputs.body }}"

      - name: Update PR
        if: steps.check.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          COMMENT="## ‚úÖ New Changes Ready for Production

          **Updated:** ${TIMESTAMP}
          **CI Status:** All tests passed ‚úÖ

          [View Latest CI Run](${{ github.event.workflow_run.html_url }})

          ---
          ü§ñ Auto-updated by GitHub Actions"

          gh pr comment ${{ steps.check.outputs.number }} --body "${COMMENT}"
          gh pr edit ${{ steps.check.outputs.number }} --add-label "ci-passed" || true

  ci-failed-notify:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.head_branch == 'develop'
    steps:
      - name: Notify
        run: |
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          ## ‚ùå Develop CI Failed

          **Branch:** develop
          **Status:** Tests Failed

          ‚ö†Ô∏è PR to main will NOT be created until CI passes

          üîó [View Failed Run](${{ github.event.workflow_run.html_url }})

          ### üîß Action Required
          1. Check CI logs
          2. Fix failing tests on develop
          3. Push fixes
          4. Wait for CI to pass
          EOF
