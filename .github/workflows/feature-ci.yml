name: Feature CI

on:
  push:
    branches:
      - "features/**"
      - "feature/**"
      - "feat/**"

env:
  NODE_VERSION: 20

jobs:
  # ===== QUICK CHECKS (Parallel) =====
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      # Parallel checks - fail fast
      - name: Lint & Type check
        run: |
          npm run lint &
          npm run type-check &
          wait
        continue-on-error: false

      - name: Run unit tests (fast mode)
        run: npm test -- --maxWorkers=2 --bail
        env:
          CI: true

      - name: Build check
        run: npm run build

  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping:1})' || mongo --eval 'db.adminCommand({ping:1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      # Parallel checks - fail fast
      - name: Lint & Type check
        run: |
          npm run lint &
          npm run type-check &
          wait
        continue-on-error: false

      - name: Run unit tests (fast mode)
        run: npm test -- --maxWorkers=2 --bail
        env:
          CI: true
          NODE_ENV: test

      - name: Build check
        run: npm run build

      # Quick integration test (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ critical paths)
      - name: Quick integration test
        run: npm run test:integration -- --bail
        if: success()
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/testdb

  # ===== CODE QUALITY (Optional - ‡πÑ‡∏°‡πà block) =====
  code-quality:
    runs-on: ubuntu-latest
    continue-on-error: true # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ fail ‡∏ó‡∏±‡πâ‡∏á pipeline
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SonarCloud

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # ‡πÅ‡∏™‡∏î‡∏á changed files
      - name: Get changed files
        id: changed-files
        run: |
          echo "Changed files in this push:"
          git diff --name-only ${{ github.event.before }} ${{ github.sha }}

      # Check code quality only on changed files (faster)
      - name: ESLint on changed files
        run: |
          CHANGED_FILES=$(git diff --name-only --diff-filter=d ${{ github.event.before }} ${{ github.sha }} | grep -E '\.(js|jsx|ts|tsx)$' || true)
          if [ -n "$CHANGED_FILES" ]; then
            echo "Linting changed files: $CHANGED_FILES"
            npx eslint $CHANGED_FILES
          else
            echo "No JS/TS files changed"
          fi
        continue-on-error: true

  # ===== SUMMARY =====
  feature-ci-summary:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: always()
    steps:
      - name: Check results
        run: |
          if [ "${{ needs.frontend.result }}" == "failure" ] || [ "${{ needs.backend.result }}" == "failure" ]; then
            echo "‚ùå Feature CI Failed"
            echo "Frontend: ${{ needs.frontend.result }}"
            echo "Backend: ${{ needs.backend.result }}"
            exit 1
          else
            echo "‚úÖ Feature CI Passed"
            echo "Branch: ${{ github.ref_name }}"
            echo "Commit: ${{ github.sha }}"
            echo "Author: ${{ github.actor }}"
          fi

      - name: Comment on commit (if available)
        if: success()
        run: |
          echo "Feature branch checks passed! üöÄ"
          echo "Ready to create PR to develop branch"
